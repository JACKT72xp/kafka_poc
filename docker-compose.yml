version: '3.9' # Aunque la advertencia dice que es obsoleto, especificar la versión puede ayudar a otros a entender la compatibilidad esperada.

services:
  zookeeper:
    image: docker.io/bitnami/zookeeper:3 # Bitnami ofrece soporte multi-arquitectura, Docker debería elegir la versión ARM64 si está disponible.
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "sh", "-c", "echo stat | nc localhost 2181 | grep Mode"]
      interval: 5s
      timeout: 5s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:7.4.0 # Confluent proporciona imágenes multi-arquitectura, Docker debería elegir la versión ARM64 si está disponible.
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 3

  connect:
    image: confluentinc/cp-kafka-connect:7.4.0 # Confluent proporciona imágenes multi-arquitectura, Docker debería elegir la versión ARM64 si está disponible.
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: kafka-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_LOG4J_LOGGERS: org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR
      CONNECT_PLUGIN_PATH: /usr/share/java,/etc/kafka-connect/jars
    volumes:
      - ./jars:/etc/kafka-connect/jars
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/"]
      interval: 5s
      timeout: 5s
      retries: 3

  db2:
    image: icr.io/db2_community/db2:11.5.8.0 # Verificar si existe una imagen ARM64 oficial o alternativa para un mejor rendimiento.
    container_name: db2
    privileged: true
    ports:
      - "50000:50000"
    environment:
      LICENSE: accept
      DB2INST1_PASSWORD: password
      DBNAME: TESTDB
    volumes:
      - ./scripts/db2:/db2-init
    command: ["bash", "-c", "su - db2inst1 -c 'db2start && db2 -tf /db2-init/db2-init.sql && tail -f /dev/null'"]
    healthcheck:
      test: ["CMD", "db2", "top", "-n", "1"]
      interval: 10s
      timeout: 5s
      retries: 3

  oracle:
    image: gvenzl/oracle-free:23 # Verificar si existe una imagen ARM64 oficial o alternativa para un mejor rendimiento.
    ports:
      - "1521:1521"
    environment:
      ORACLE_PASSWORD: oracle
    volumes:
      - ./scripts/oracle:/container-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "sqlplus", "-S", "system/oracle@localhost:1521", "QUIT"]
      interval: 10s
      timeout: 5s
      retries: 3

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.4.0 # Confluent proporciona imágenes multi-arquitectura, Docker debería elegir la versión ARM64 si está disponible.
    depends_on:
      kafka:
        condition: service_healthy
      connect:
        condition: service_healthy
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka:9092
      CONTROL_CENTER_CONNECT_CLUSTER: connect:8083
      CONTROL_CENTER_KSQL_KSQLDB1_URL: http://ksqldb-server:8088
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: http://localhost:8088
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_ENABLE: 'false'
      PORT: 9021
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9021/"]
      interval: 10s
      timeout: 5s
      retries: 3