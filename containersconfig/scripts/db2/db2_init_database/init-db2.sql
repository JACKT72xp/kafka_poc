-- Tabla de expedientes
CREATE TABLE expedientes (
 id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
 fecha_contratacion DATE NOT NULL,
 titular VARCHAR(255) NOT NULL,
 numero_expediente VARCHAR(50) NOT NULL UNIQUE,
 CHGMARKER TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Tabla de fondos
CREATE TABLE fondos (
 id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
 nombre VARCHAR(255) NOT NULL,
 tipo VARCHAR(50) NOT NULL,
 fecha_creacion DATE NOT NULL,
 volumen_activos DECIMAL(20, 2) NOT NULL,
 CHGMARKER TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
 CHGINC INTEGER NOT NULL DEFAULT 0
);

-- Tabla de órdenes
CREATE TABLE ordenes (
 id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
 id_expediente INTEGER NOT NULL,
 fecha_orden DATE NOT NULL,
 estado VARCHAR(50) NOT NULL,
 tipo_orden VARCHAR(50) CHECK (tipo_orden IN ('compra', 'venta')) NOT NULL,
 fecha_ejecucion DATE NOT NULL,
 importe DECIMAL(20, 2) NOT NULL,
 id_fondo INTEGER NOT NULL,
 CHGMARKER TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
 FOREIGN KEY (id_expediente) REFERENCES expedientes(id) ON DELETE CASCADE,
 FOREIGN KEY (id_fondo) REFERENCES fondos(id) ON DELETE CASCADE
);

-- Tabla de traspasos
CREATE TABLE traspasos (
 id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
 id_expediente INTEGER NOT NULL,
 id_fondo_origen INTEGER NOT NULL,
 id_fondo_destino INTEGER NOT NULL,
 fecha DATE NOT NULL,
 importe DECIMAL(20, 2) NOT NULL,
 CHGMARKER TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
 FOREIGN KEY (id_expediente) REFERENCES expedientes(id) ON DELETE CASCADE,
 FOREIGN KEY (id_fondo_origen) REFERENCES fondos(id) ON DELETE CASCADE,
 FOREIGN KEY (id_fondo_destino) REFERENCES fondos(id) ON DELETE CASCADE
);

-- Tabla de retenciones
CREATE TABLE retenciones_1 (
 id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
 id_orden INTEGER NOT NULL,
 fecha_retencion DATE NOT NULL,
 tipo VARCHAR(50) NOT NULL,
 importe_retencion DECIMAL(20, 2) NOT NULL,
 CHGMARKER TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
 FOREIGN KEY (id_orden) REFERENCES ordenes(id) ON DELETE CASCADE
);

-- Tabla de retenciones
CREATE TABLE retenciones_2 (
 id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
 id_traspaso INTEGER NOT NULL,
 fecha_retencion DATE NOT NULL,
 tipo VARCHAR(50) NOT NULL,
 importe_retencion DECIMAL(20, 2) NOT NULL,
 CHGMARKER TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
 FOREIGN KEY (id_traspaso) REFERENCES traspasos(id) ON DELETE CASCADE
);

-- Crear tabla de contratos
CREATE TABLE contratos (
 id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
 fecha_inicio_contrato DATE NOT NULL,
 fecha_vencimiento_contrato DATE NOT NULL,
 id_parte_a VARCHAR(6) NOT NULL,
 condiciones_contrato_parte_a VARCHAR(50) NOT NULL,
 terminos_pago_parte_a VARCHAR(50) NOT NULL,
 id_parte_b VARCHAR(6) NOT NULL,
 condiciones_contrato_parte_b VARCHAR(50) NOT NULL,
 terminos_pago_parte_b VARCHAR(50) NOT NULL,
 CHGMARKER TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);


-- Crear tabla de borrados
CREATE TABLE borrados (
id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
pk_field varchar (255),
pk_id varchar(255) NOT NULL,
table_name VARCHAR(50) NOT NULL,
CHGMARKER TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Crear la tabla PROCESO_BANCARIO
CREATE TABLE PROCESO_BANCARIO (
    ID INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    ESTADO VARCHAR(20) NOT NULL CHECK (ESTADO IN (
        'Solicitud_recibida', 'En_revision', 'Aprobado', 'En_proceso',
        'Finalizado', 'Rechazado', 'Cancelado', 'Pendiente', 'En_espera'
    )),
    NOMBRE VARCHAR(50) NOT NULL,
    FECHA DATE NOT NULL
);

-- Crear la tabla PROCESO_BANCARIO_ALL_STATUS
CREATE TABLE PROCESO_BANCARIO_ALL_STATUS (
    ID_ESTADO VARCHAR(20) NOT NULL PRIMARY KEY,
    ID INT NOT NULL,
    ESTADO VARCHAR(20) NOT NULL,
    NOMBRE VARCHAR(50) NOT NULL,
    FECHA DATE NOT NULL,
    CHGINC INT GENERATED ALWAYS AS IDENTITY UNIQUE NOT NULL,
    FECHA_ULTIMA_MODIFICACION TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);




-- Crear triggers
CREATE or REPLACE TRIGGER delete_contratos AFTER DELETE ON contratos
REFERENCING OLD AS old_row
FOR EACH ROW
INSERT INTO borrados (pk_id, pk_field, table_name) VALUES (old_row.id, 'id', 'contratos');

CREATE or REPLACE TRIGGER delete_expedientes AFTER DELETE ON expedientes
REFERENCING OLD AS old_row
FOR EACH ROW
INSERT INTO borrados (pk_id, pk_field, table_name) VALUES (old_row.id, 'id', 'expedientes');

CREATE or REPLACE TRIGGER delete_fondos AFTER DELETE ON fondos
REFERENCING OLD AS old_row
FOR EACH ROW
INSERT INTO borrados (pk_id, pk_field, table_name) VALUES (old_row.id, 'id', 'fondos');

CREATE or REPLACE TRIGGER delete_ordenes AFTER DELETE ON ordenes
REFERENCING OLD AS old_row
FOR EACH ROW
INSERT INTO borrados (pk_id, pk_field, table_name) VALUES (old_row.id, 'id', 'ordenes');

CREATE or REPLACE TRIGGER delete_retenciones_1 AFTER DELETE ON retenciones_1
REFERENCING OLD AS old_row
FOR EACH ROW
INSERT INTO borrados (pk_id, pk_field, table_name) VALUES (old_row.id, 'id', 'retenciones_1');

CREATE or REPLACE TRIGGER delete_retenciones_2 AFTER DELETE ON retenciones_2
REFERENCING OLD AS old_row
FOR EACH ROW
INSERT INTO borrados (pk_id, pk_field, table_name) VALUES (old_row.id, 'id', 'retenciones_2');

CREATE or REPLACE TRIGGER delete_traspasos AFTER DELETE ON traspasos
REFERENCING OLD AS old_row
FOR EACH ROW
INSERT INTO borrados (pk_id, pk_field, table_name) VALUES (old_row.id, 'id', 'traspasos');

-- Crear trigger de inserción
CREATE OR REPLACE TRIGGER INSERT_PROCESO_BANCARIO
AFTER INSERT ON PROCESO_BANCARIO
REFERENCING NEW AS NEW_ROW
FOR EACH ROW
BEGIN
    INSERT INTO PROCESO_BANCARIO_ALL_STATUS (
        ID_ESTADO, ID, ESTADO, NOMBRE, FECHA
    )
    VALUES (
        VARCHAR(NEW_ROW.ID) || NEW_ROW.ESTADO,
        NEW_ROW.ID,
        NEW_ROW.ESTADO,
        NEW_ROW.NOMBRE,
        NEW_ROW.FECHA
    );
END;


-- Crear trigger de actualización
CREATE OR REPLACE TRIGGER UPDATE_PROCESO_BANCARIO
AFTER UPDATE ON PROCESO_BANCARIO
REFERENCING OLD AS OLD_ROW NEW AS NEW_ROW
FOR EACH ROW
BEGIN
    IF OLD_ROW.ESTADO <> NEW_ROW.ESTADO THEN
        INSERT INTO PROCESO_BANCARIO_ALL_STATUS (
            ID_ESTADO, ID, ESTADO, NOMBRE, FECHA
        )
        VALUES (
            VARCHAR(NEW_ROW.ID) || NEW_ROW.ESTADO,
            NEW_ROW.ID,
            NEW_ROW.ESTADO,
            NEW_ROW.NOMBRE,
            NEW_ROW.FECHA
        );
    ELSE
        UPDATE PROCESO_BANCARIO_ALL_STATUS
        SET NOMBRE = NEW_ROW.NOMBRE,
            FECHA = NEW_ROW.FECHA,
            FECHA_ULTIMA_MODIFICACION = CURRENT_TIMESTAMP
        WHERE ID_ESTADO = VARCHAR(NEW_ROW.ID) || NEW_ROW.ESTADO;
    END IF;
END;




 
CREATE OR REPLACE TRIGGER DELETE_CONTRATOS_PARTE_A AFTER DELETE ON CONTRATOS
REFERENCING OLD AS old_row
FOR EACH ROW
INSERT INTO borrados (pk_id, pk_field, table_name) VALUES (old_row.id, 'id', 'contratos_parte_a');

CREATE OR REPLACE TRIGGER DELETE_CONTRATOS_PARTE_B AFTER DELETE ON CONTRATOS
REFERENCING OLD AS old_row
FOR EACH ROW
INSERT INTO borrados (pk_id, pk_field, table_name) VALUES (old_row.id, 'id', 'contratos_parte_b');







-- Crear vistas
CREATE OR REPLACE VIEW expedientes_borrados AS
SELECT pk_id AS id, CURRENT_TIMESTAMP AS fecha_contratacion, 'TITULAR' AS titular, 'EXP-000' AS numero_expediente, CHGMARKER
FROM borrados
WHERE table_name = 'expedientes';

CREATE OR REPLACE VIEW fondos_borrados AS
SELECT pk_id AS id, 'NOMBRE' AS nombre, 'TIPO' AS tipo, CURRENT_TIMESTAMP AS fecha_creacion, 0 AS volumen_activos, CHGMARKER
FROM borrados
WHERE table_name = 'fondos';

CREATE OR REPLACE VIEW contratos_borrados AS
SELECT pk_id AS id, CURRENT_DATE AS fecha_inicio_contrato, CURRENT_DATE AS fecha_vencimiento_contrato, 'ID_PARTE_A' AS id_parte_a, 'CONDICIONES_PARTE_A' AS condiciones_contrato_parte_a, 'TERMINOS_PARTE_A' AS terminos_pago_parte_a, 'ID_PARTE_B' AS id_parte_b, 'CONDICIONES_PARTE_B' AS condiciones_contrato_parte_b, 'TERMINOS_PARTE_B' AS terminos_pago_parte_b, CHGMARKER
FROM borrados
WHERE table_name = 'contratos';

CREATE OR REPLACE VIEW ordenes_full AS
SELECT e.id AS id_expediente, e.fecha_contratacion AS fecha_contratacion_expediente, e.titular AS titular_expediente, e.numero_expediente, e.CHGMARKER AS fecha_ultima_modificacion_expediente,
 f.id AS id_fondo, f.nombre AS nombre_fondo, f.tipo AS tipo_fondo, f.fecha_creacion AS fecha_creacion_fondo, f.volumen_activos AS volumen_activos_fondo, f.CHGMARKER AS fecha_ultima_modificacion_fondo,
 o.id AS id_ordenes, o.fecha_orden AS fecha_ordenes, o.estado AS estado_ordenes, o.tipo_orden AS tipo_ordenes, o.fecha_ejecucion AS fecha_ejecucion_ordenes, o.importe AS importe_ordenes, o.CHGMARKER AS fecha_ultima_modificacion_ordenes
FROM expedientes e, fondos f, ordenes o
WHERE e.id = o.id_expediente
AND f.id = o.id_fondo;

CREATE OR REPLACE VIEW VW_EXPEDIENTES 
AS
SELECT
    ID, FECHA_CONTRATACION, TITULAR, NUMERO_EXPEDIENTE, CHGMARKER, ID AS CHGINC
FROM EXPEDIENTES;
    
CREATE OR REPLACE VIEW VW_ORDENES 
AS
SELECT ID AS ID_ORDEN, ID_EXPEDIENTE, FECHA_ORDEN, 
       ESTADO AS ESTADO_ORDEN, TIPO_ORDEN, 
       FECHA_EJECUCION AS FECHA_EJECUCION_ORDEN, 
       IMPORTE AS IMPORTE_ORDEN, ID_FONDO, CHGMARKER, ID AS CHGINC
FROM ORDENES;
     
CREATE OR REPLACE VIEW VW_CONTRATOS_PARTE_A
AS
SELECT * FROM 
    (SELECT ID, FECHA_INICIO_CONTRATO, FECHA_VENCIMIENTO_CONTRATO, 
            ID_PARTE_A, CONDICIONES_CONTRATO_PARTE_A AS CONDICIONES_CONTRATO, 
            TERMINOS_PAGO_PARTE_A AS TERMINOS_PAGO, 
            CHGMARKER, ID AS CHGINC 
      FROM CONTRATOS) CONTRATOS_PARTE_A;
      
CREATE OR REPLACE VIEW VW_CONTRATOS_PARTE_B
AS
SELECT * FROM 
    (SELECT ID, FECHA_INICIO_CONTRATO, FECHA_VENCIMIENTO_CONTRATO, 
            ID_PARTE_B, CONDICIONES_CONTRATO_PARTE_B AS CONDICIONES_CONTRATO, 
	    TERMINOS_PAGO_PARTE_B  AS TERMINOS_PAGO, 
            CHGMARKER, ID AS CHGINC
      FROM CONTRATOS) CONTRATOS_PARTE_B;
      

CREATE OR REPLACE VIEW VW_FONDOS 
AS
SELECT
    ID, NOMBRE, TIPO, FECHA_CREACION, VOLUMEN_ACTIVOS, CHGMARKER, CHGINC
FROM FONDOS;


CREATE OR REPLACE TRIGGER UPDATE_FONDOS
AFTER INSERT ON FONDOS
REFERENCING NEW AS N_ROW
FOR EACH ROW
UPDATE FONDOS SET CHGINC = ID
    where id = N_ROW.id;
     


-- UPDATE CHGMARKER
CREATE OR REPLACE TRIGGER trg_update_expedientes
BEFORE UPDATE ON expedientes
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
SET NEW.CHGMARKER = CURRENT_TIMESTAMP;


CREATE OR REPLACE TRIGGER trg_update_fondos
BEFORE UPDATE ON fondos
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
SET NEW.CHGMARKER = CURRENT_TIMESTAMP;


CREATE OR REPLACE TRIGGER trg_update_ordenes
BEFORE UPDATE ON ordenes
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
SET NEW.CHGMARKER = CURRENT_TIMESTAMP;



CREATE OR REPLACE TRIGGER trg_update_traspasos
BEFORE UPDATE ON traspasos
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
SET NEW.CHGMARKER = CURRENT_TIMESTAMP;


CREATE OR REPLACE TRIGGER trg_update_retenciones_1
BEFORE UPDATE ON retenciones_1
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
SET NEW.CHGMARKER = CURRENT_TIMESTAMP;

CREATE OR REPLACE TRIGGER trg_update_retenciones_2
BEFORE UPDATE ON retenciones_2
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
SET NEW.CHGMARKER = CURRENT_TIMESTAMP;


CREATE OR REPLACE TRIGGER trg_update_contratos
BEFORE UPDATE ON contratos
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
SET NEW.CHGMARKER = CURRENT_TIMESTAMP;




